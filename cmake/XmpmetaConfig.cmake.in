# Copyright 2016 The XMPMeta Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Config file for xmpmeta - Find xmpmeta & dependencies.
#
# This file is used by CMake when find_package(Xmpmeta) is invoked and either
# the directory containing this file either is present in CMAKE_MODULE_PATH
# (if Xmpmeta was installed), or exists in the local CMake package registry if
# the Xmpmeta build directory was exported.
#
# This module defines the following variables:
#
# Xmpmeta_FOUND / XMPMETA_FOUND: True if Xmpmeta has been successfully
#                            found. Both variables are set as although
#                            FindPackage() only references Xmpmeta_FOUND
#                            in Config mode, given the conventions for
#                            <package>_FOUND when FindPackage() is
#                            called in Module mode, users could
#                            reasonably expect to use XMPMETA_FOUND
#                            instead.
#
# XMPMETA_VERSION: Version of Xmpmeta found.
#
# XMPMETA_INCLUDE_DIRS: Include directories for Xmpmeta and the
#                     dependencies which appear in the Xmpmeta public
#                     API and are thus required to use Xmpmeta.
#
# XMPMETA_LIBRARIES: Libraries for Xmpmeta and all
#                  dependencies against which Xmpmeta was
#                  compiled. This will not include any optional
#                  dependencies that were disabled when Xmpmeta was
#                  compiled.
#
# The following variables are also defined for legacy compatibility
# only.  Any new code should not use them as they do not conform to
# the standard CMake FindPackage naming conventions.
#
# XMPMETA_INCLUDES = ${XMPMETA_INCLUDE_DIRS}.

# Called if we failed to find Xmpmeta or any of its required dependencies,
# unsets all public (designed to be used externally) variables and reports
# error message at priority depending upon [REQUIRED/QUIET/<NONE>] argument.
macro(XMPMETA_REPORT_NOT_FOUND REASON_MSG)
  # FindPackage() only references Xmpmeta_FOUND, and requires it to be
  # explicitly set FALSE to denote not found (not merely undefined).
  set(Xmpmeta_FOUND FALSE)
  set(XMPMETA_FOUND FALSE)
  unset(XMPMETA_INCLUDE_DIRS)
  unset(XMPMETA_LIBRARIES)

  # Reset the CMake module path to its state when this script was called.
  set(CMAKE_MODULE_PATH ${CALLERS_CMAKE_MODULE_PATH})

  # Note <package>_FIND_[REQUIRED/QUIETLY] variables defined by
  # FindPackage() use the camelcase library name, not uppercase.
  if (Xmpmeta_FIND_QUIETLY)
    message(STATUS "Failed to find Xmpmeta - " ${REASON_MSG} ${ARGN})
  else (Xmpmeta_FIND_REQUIRED)
    message(FATAL_ERROR "Failed to find Xmpmeta - " ${REASON_MSG} ${ARGN})
  else()
    # Neither QUIETLY nor REQUIRED, use SEND_ERROR which emits an error
    # that prevents generation, but continues configuration.
    message(SEND_ERROR "Failed to find Xmpmeta - " ${REASON_MSG} ${ARGN})
  endif ()
  return()
endmacro(XMPMETA_REPORT_NOT_FOUND)

# If Xmpmeta was not installed, then by definition it was exported
# from a build directory.
set(XMPMETA_WAS_INSTALLED @SETUP_XMPMETA_CONFIG_FOR_INSTALLATION@)

# Record the state of the CMake module path when this script was
# called so that we can ensure that we leave it in the same state on
# exit as it was on entry, but modify it locally.
set(CALLERS_CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH})

# Get the (current, i.e. installed) directory containing this file.
get_filename_component(XMPMETA_CURRENT_CONFIG_DIR
  "${CMAKE_CURRENT_LIST_FILE}" PATH)

if (XMPMETA_WAS_INSTALLED)
  # Reset CMake module path to the installation directory of this
  # script, thus we will use the FindPackage() scripts shipped with
  # Xmpmeta to find Xmpmeta' dependencies, even if the user has equivalently
  # named FindPackage() scripts in their project.
  set(CMAKE_MODULE_PATH ${XMPMETA_CURRENT_CONFIG_DIR})

  # Build the absolute root install directory as a relative path
  # (determined when Xmpmeta was configured & built) from the current
  # install directory for this this file.  This allows for the install
  # tree to be relocated, after Xmpmeta was built, outside of CMake.
  get_filename_component(CURRENT_ROOT_INSTALL_DIR
    ${XMPMETA_CURRENT_CONFIG_DIR}/@INSTALL_ROOT_REL_CONFIG_INSTALL_DIR@
    ABSOLUTE)
  if (NOT EXISTS ${CURRENT_ROOT_INSTALL_DIR})
    xmpmeta_report_not_found(
      "Xmpmeta install root: ${CURRENT_ROOT_INSTALL_DIR}, "
      "determined from relative path from XmpmetaConfig.cmake install location: "
      "${XMPMETA_CURRENT_CONFIG_DIR}, does not exist. Either the install "
      "directory was deleted, or the install tree was only partially relocated "
      "outside of CMake after Xmpmeta was built.")
  endif (NOT EXISTS ${CURRENT_ROOT_INSTALL_DIR})

  # Set the include directories for Xmpmeta (itself).
  set(XMPMETA_INCLUDE_DIR "${CURRENT_ROOT_INSTALL_DIR}/includes")
  if (NOT EXISTS ${XMPMETA_INCLUDE_DIR}/xmpmeta/xmpmeta.h)
    xmpmeta_report_not_found(
      "Xmpmeta install root: ${CURRENT_ROOT_INSTALL_DIR}, "
      "determined from relative path from XmpmetaConfig.cmake install location: "
      "${XMPMETA_CURRENT_CONFIG_DIR}, does not contain Xmpmeta headers. "
      "Either the install directory was deleted, or the install tree was only "
      "partially relocated outside of CMake after Xmpmeta was built.")
  endif (NOT EXISTS ${XMPMETA_INCLUDE_DIR}/xmpmeta/xmpmeta.h)
  list(APPEND XMPMETA_INCLUDE_DIRS ${XMPMETA_INCLUDE_DIR})

else(XMPMETA_WAS_INSTALLED)
  # Xmpmeta was exported from the build tree.
  set(XMPMETA_EXPORTED_BUILD_DIR ${XMPMETA_CURRENT_CONFIG_DIR})
  get_filename_component(XMPMETA_EXPORTED_SOURCE_DIR
    ${XMPMETA_EXPORTED_BUILD_DIR}/@INSTALL_ROOT_REL_CONFIG_INSTALL_DIR@
    ABSOLUTE)
  if (NOT EXISTS ${XMPMETA_EXPORTED_SOURCE_DIR})
    xmpmeta_report_not_found(
      "Xmpmeta exported source directory: ${XMPMETA_EXPORTED_SOURCE_DIR}, "
      "determined from relative path from XmpmetaConfig.cmake exported build "
      "directory: ${XMPMETA_EXPORTED_BUILD_DIR} does not exist.")
  endif()

  # Reset CMake module path to the cmake directory in the Xmpmeta source
  # tree which was exported, thus we will use the FindPackage() scripts shipped
  # with Xmpmeta to find Xmpmeta' dependencies, even if the user has equivalently
  # named FindPackage() scripts in their project.
  set(CMAKE_MODULE_PATH ${XMPMETA_EXPORTED_SOURCE_DIR}/cmake)

  # Set the include directories for Xmpmeta (itself).
  set(XMPMETA_INCLUDE_DIR "${XMPMETA_EXPORTED_SOURCE_DIR}/include")
  if (NOT EXISTS ${XMPMETA_INCLUDE_DIR}/xmpmeta/xmpmeta.h)
    xmpmeta_report_not_found(
      "Xmpmeta exported source directory: ${XMPMETA_EXPORTED_SOURCE_DIR}, "
      "determined from relative path from XmpmetaConfig.cmake exported build "
      "directory: ${XMPMETA_EXPORTED_BUILD_DIR}, does not contain Xmpmeta headers.")
  endif (NOT EXISTS ${XMPMETA_INCLUDE_DIR}/xmpmeta/xmpmeta.h)
  list(APPEND XMPMETA_INCLUDE_DIRS ${XMPMETA_INCLUDE_DIR})

  # Append the path to the configured config.h in the exported build directory
  # to the Xmpmeta include directories.
  set(XMPMETA_CONFIG_FILE
    ${XMPMETA_EXPORTED_BUILD_DIR}/config/xmpmeta/internal/config.h)
  if (NOT EXISTS ${XMPMETA_CONFIG_FILE})
    xmpmeta_report_not_found(
      "Xmpmeta exported build directory: ${XMPMETA_EXPORTED_BUILD_DIR}, "
      "does not contain required configured Xmpmeta config.h, it is not here: "
      "${XMPMETA_CONFIG_FILE}.")
  endif (NOT EXISTS ${XMPMETA_CONFIG_FILE})
  list(APPEND XMPMETA_INCLUDE_DIRS ${XMPMETA_EXPORTED_BUILD_DIR}/config)
endif(XMPMETA_WAS_INSTALLED)

# Set the version.
set(XMPMETA_VERSION @XMPMETA_VERSION@ )

# libxml
# Flag set during configuration and build of Xmpmeta.
set(XMPMETA_EIGEN_VERSION @EIGEN_VERSION@)
# Append the locations of libxml when Xmpmeta was built to the search path hints.
list(APPEND EIGEN_INCLUDE_DIR_HINTS @EIGEN_INCLUDE_DIR@)
# Search quietly to control the timing of the error message if not found. The
# search should be for an exact match, but for usability reasons do a soft
# match and reject with an explanation below.
find_package(libxml ${XMPMETA_LIBXML_VERSION} QUIET)
if (LIBXML_FOUND)
  if (NOT LIBXML_VERSION VERSION_EQUAL XMPMETA_EIGEN_VERSION)
    # CMake's VERSION check in FIND_PACKAGE() will accept any version >= the
    # specified version. However, only version = is supported. Improve
    # usability by explaining why we don't accept non-exact version matching.
    xmpmeta_report_not_found("Found libxml dependency, but the version of libxml "
      "found (${LIBXML_VERSION}) does not exactly match the version of libxml "
      "Xmpmeta was compiled with (${XMPMETA_LIBXML_VERSION}), and may not work "
      "property with ${LIBXML_VERSION}")
  endif ()
  message(STATUS "Found required Xmpmeta dependency: "
    "libxml version ${XMPMETA_LIBXML_VERSION} in ${LIBXML_INCLUDE_DIRS}")
else (LIBXML_FOUND)
  xmpmeta_report_not_found("Missing required Xmpmeta "
    "dependency: libxml version ${XMPMETA_LIBXML_VERSION}, please set "
    "LIBXML_INCLUDE_DIR.")
endif (LIBXML_FOUND)
list(APPEND XMPMETA_INCLUDE_DIRS ${LIBXML_INCLUDE_DIRS})

# Glog.
# Flag set during configuration and build of Xmpmeta.
set(XMPMETA_USES_MINIGLOG @MINIGLOG@)
if (XMPMETA_USES_MINIGLOG)
  set(MINIGLOG_INCLUDE_DIR ${XMPMETA_INCLUDE_DIR}/xmpmeta/internal/miniglog)
  if (NOT EXISTS ${MINIGLOG_INCLUDE_DIR})
    xmpmeta_report_not_found(
      "Xmpmeta include directory: "
      "${XMPMETA_INCLUDE_DIR} does not include miniglog, but Xmpmeta was "
      "compiled with MINIGLOG enabled (in place of Glog).")
  endif (NOT EXISTS ${MINIGLOG_INCLUDE_DIR})
  list(APPEND XMPMETA_INCLUDE_DIRS ${MINIGLOG_INCLUDE_DIR})
  # Output message at standard log level (not the lower STATUS) so that
  # the message is output in GUI during configuration to warn user.
  message("-- Found Xmpmeta compiled with miniglog substitute "
    "for glog, beware this will likely cause problems if glog is later linked.")
else (XMPMETA_USES_MINIGLOG)
  # Append the locations of glog when Xmpmeta was built to the search path hints.
  list(APPEND GLOG_INCLUDE_DIR_HINTS @GLOG_INCLUDE_DIR@)
  get_filename_component(XMPMETA_BUILD_GLOG_LIBRARY_DIR @GLOG_LIBRARY@ PATH)
  list(APPEND GLOG_LIBRARY_DIR_HINTS ${XMPMETA_BUILD_GLOG_LIBRARY_DIR})

  # Search quietly s/t we control the timing of the error message if not found.
  find_package(Glog QUIET)
  if (GLOG_FOUND)
    message(STATUS "Found required Xmpmeta dependency: "
      "Glog in ${GLOG_INCLUDE_DIRS}")
  else (GLOG_FOUND)
    xmpmeta_report_not_found("Missing required Xmpmeta "
      "dependency: Glog, please set GLOG_INCLUDE_DIR.")
  endif (GLOG_FOUND)
  list(APPEND XMPMETA_INCLUDE_DIRS ${GLOG_INCLUDE_DIRS})
endif (XMPMETA_USES_MINIGLOG)

# Import exported Xmpmeta targets, if they have not already been imported.
if (NOT TARGET xmpmeta AND NOT Xmpmeta_BINARY_DIR)
  include(${XMPMETA_CURRENT_CONFIG_DIR}/XmpmetaTargets.cmake)
endif (NOT TARGET xmpmeta AND NOT Xmpmeta_BINARY_DIR)
# Set the expected XX_LIBRARIES variable for FindPackage().
set(XMPMETA_LIBRARIES xmpmeta)

# Make user aware of any compile flags that will be added to their targets
# which use Xmpmeta (i.e. flags exported in the Xmpmeta target).  Only CMake
# versions >= 2.8.12 support target_compile_options().
if (TARGET ${XMPMETA_LIBRARIES} AND
    NOT CMAKE_VERSION VERSION_LESS "2.8.12")
  get_target_property(XMPMETA_INTERFACE_COMPILE_OPTIONS
    ${XMPMETA_LIBRARIES} INTERFACE_COMPILE_OPTIONS)

  if (XMPMETA_WAS_INSTALLED)
    set(XMPMETA_LOCATION "${CURRENT_ROOT_INSTALL_DIR}")
  else()
    set(XMPMETA_LOCATION "${XMPMETA_EXPORTED_BUILD_DIR}")
  endif()

  # Check for -std=c++11 flags.
  if (XMPMETA_INTERFACE_COMPILE_OPTIONS MATCHES ".*std=c\\+\\+11.*")
    message(STATUS "Xmpmeta version ${XMPMETA_VERSION} detected here: "
      "${XMPMETA_LOCATION} was built with C++11. Xmpmeta target will add "
      "C++11 flags to compile options for targets using it.")
  endif()
endif()

# Set legacy include directories variable for backwards compatibility.
set(XMPMETA_INCLUDES ${XMPMETA_INCLUDE_DIRS})

# Reset CMake module path to its state when this script was called.
set(CMAKE_MODULE_PATH ${CALLERS_CMAKE_MODULE_PATH})

# As we use XMPMETA_REPORT_NOT_FOUND() to abort, if we reach this point we have
# found Xmpmeta and all required dependencies.
if (XMPMETA_WAS_INSTALLED)
  message(STATUS "Found Xmpmeta version: ${XMPMETA_VERSION} "
    "installed in: ${CURRENT_ROOT_INSTALL_DIR}")
else (XMPMETA_WAS_INSTALLED)
  message(STATUS "Found Xmpmeta version: ${XMPMETA_VERSION} "
    "exported from build directory: ${XMPMETA_EXPORTED_BUILD_DIR}")
endif()

# Set XMPMETA_FOUND to be equivalent to Xmpmeta_FOUND, which is set to
# TRUE by FindPackage() if this file is found and run, and after which
# Xmpmeta_FOUND is not (explicitly, i.e. undefined does not count) set
# to FALSE.
set(XMPMETA_FOUND TRUE)
